import sys
import time

import pygame
import pygame as pg

import math
import random

bg_main_flor_pos = 0, -40
bg_1 = 0, -40
bg_2 = 0, -40
bg_3 = 0, -40

bg_zaliv = 0, -40

particles = 5
fov = 5


screen_width = 384
screen_height = 216
screen = pg.display.set_mode([screen_width, screen_height], pygame.RESIZABLE | pygame.SCALED | pygame.FULLSCREEN)
pg.display.set_caption("Game")
black = (0, 0, 0)

SCREEN_WIDTH = screen_width
SCREEN_HEIGHT = screen_height

bg_main_flor_pos = (0, -40)
bg_black = (0, -40)
bg_1 = (0, -40)
bg_2 = (0, -40)
bg_3 = (0, -40)
bg_zaliv = (0, -40)

number_screen = 'game'
clock = pg.time.Clock()

coins = 0
ammo = 5
health = 10
max_health = 14

difficulty = 0

level_left_bound = 0
level_right_bound = 1850

moving_left = False
moving_right = False
kicking = False

is_reloading = False
reload_start_time = 0
reload_duration = 4000

bandages_active = False
bandages_activation_start_time = 0
bandages_last_heal_time = 0
bandages_duration = 5000
bandages_cooldown = 30000
bandages_next_use_time = 0

apteka_cooldown = 60000
apteka_next_use_time = 0


# ---------загрузка картинок для меню-------

fon_menu = pygame.image.load('backgrounds/menu_fon_defoult.png')
fon_ready_ornot = pg.image.load('backgrounds/start_new_game_menu.png')
fon_choose_difficulty = pg.image.load('backgrounds/choose_difficulty_menu.png')
fon_settings_display = pg.image.load('backgrounds/menu_setting_display.png')
fon_settings_sounds = pg.image.load('backgrounds/menu_setting_sounds.png')
fon_menu_continue = pg.image.load('backgrounds/menu_fon_defoult_continue.png')
fon_menu_death = pg.image.load('backgrounds/you_are_death_screen.png')
EXAMPLE_GAME = pg.image.load('backgrounds/EXAMPLE_GAME.png')

loading_screen_1 =pg.image.load('loading_screen/1.png')
loading_screen_2 =pg.image.load('loading_screen/2.png')
loading_screen_3 =pg.image.load('loading_screen/3.png')
loading_screen_4 =pg.image.load('loading_screen/4.png')
loading_screen_5 =pg.image.load('loading_screen/5.png')
loading_screen_6 =pg.image.load('loading_screen/6.png')
loading_screen_7 =pg.image.load('loading_screen/7.png')
loading_screen_8 =pg.image.load('loading_screen/8.png')
loading_screen_9 =pg.image.load('loading_screen/9.png')
loading_screen_10 =pg.image.load('loading_screen/10.png')
loading_screen_11 =pg.image.load('loading_screen/11.png')
loading_screen_12 =pg.image.load('loading_screen/12.png')
loading_screen_13 =pg.image.load('loading_screen/13.png')
loading_screen_14 =pg.image.load('loading_screen/14.png')






button_play_not_select = pygame.image.load('./menu_buttons/button_start_not_selected.png')
button_play_select = pygame.image.load('./menu_buttons/button_start_selected.png')

button_settings_not_selected = pygame.image.load('./menu_buttons/button_settings_not_selected.png')
button_settings_selected = pygame.image.load('./menu_buttons/button_settings_selected.png')

button_exit_not_selected = pygame.image.load('./menu_buttons/button_exit_not_selected.png')
button_exit_selected = pygame.image.load('./menu_buttons/button_exit_selected.png')

button_yes_not_pressed = pg.image.load('./menu_buttons/button_yes_not_pressed.png')
button_yes_pressed = pg.image.load('./menu_buttons/button_yes_pressed.png')

button_no_not_pressed = pg.image.load('./menu_buttons/button_no_not_pressed.png')
button_no_pressed = pg.image.load('./menu_buttons/button_no_pressed.png')

button_easy_pressed = pg.image.load('./menu_buttons/easy_button_pressed.png')
button_easy_not_pressed = pg.image.load('./menu_buttons/easy_button_not_pressedt.png')

button_medium_pressed = pg.image.load('./menu_buttons/button_medium_pressed.png')
button_medium_not_pressed = pg.image.load('./menu_buttons/button_medium_not_pressed.png')

button_hard_pressed = pg.image.load('./menu_buttons/button_hard_pressed.png')
button_hard_not_pressed = pg.image.load('./menu_buttons/button_hard_not_pressed.png')

button_sounds_pressed = pg.image.load('./menu_buttons/button_sounds_pressed.png')
button_sounds_not_pressed = pg.image.load('./menu_buttons/button_sounds_not_pressed.png')

button_display_pressed = pg.image.load('./menu_buttons/button_display_pressed.png')
button_display_not_pressed = pg.image.load('./menu_buttons/button_display_not_pressed.png')

button_back_pressed = pg.image.load('./menu_buttons/button_back_pressed.png')
button_back_not_pressed = pg.image.load('./menu_buttons/button_back_not_pressed.png')

button_minus_pressed = pg.image.load('./menu_buttons/button_minus_pressed.png')
button_minus_not_pressed = pg.image.load('./menu_buttons/button_minus_not_pressed.png')

button_plus_pressed = pg.image.load('./menu_buttons/button_plus_pressed.png')
button_plus_not_pressed = pg.image.load('./menu_buttons/button_plus_not_pressed.png')

button_continue_pressed = pg.image.load('./menu_buttons/button_continue_pressed.png')
button_continue_not_pressed = pg.image.load('./menu_buttons/button_continue_not_pressed.png')


scala_particles_0 = pg.image.load('./settings_display_scale/particles_0.png')
scala_particles_1 = pg.image.load('./settings_display_scale/particles_1.png')
scala_particles_2 = pg.image.load('./settings_display_scale/particles_2.png')
scala_particles_3 = pg.image.load('./settings_display_scale/particles_3.png')
scala_particles_4 = pg.image.load('./settings_display_scale/particles_4.png')
scala_particles_5 = pg.image.load('./settings_display_scale/particles_5.png')
scala_particles_6 = pg.image.load('./settings_display_scale/particles_6.png')
scala_particles_7 = pg.image.load('./settings_display_scale/particles_7.png')
scala_particles_8 = pg.image.load('./settings_display_scale/particles_8.png')
scala_particles_9 = pg.image.load('./settings_display_scale/particles_9.png')
scala_particles_10 = pg.image.load('./settings_display_scale/particles_10.png')
scala_particles_11 = pg.image.load('./settings_display_scale/particles_11.png')
scala_particles_12 = pg.image.load('./settings_display_scale/particles_12.png')

button_left_pressed = pg.image.load('./menu_buttons/button_leftt_pressed.png')
button_left_not_pressed = pg.image.load('./menu_buttons/button_leftt_not_pressed.png')

button_right_pressed = pg.image.load('./menu_buttons/button_right_pressed.png')
button_right_not_pressed = pg.image.load('./menu_buttons/button_right_not_pressed.png')

back_death_najata = pg.image.load('./menu_buttons/back_death_najata.png')
back_death_ne_najata =  pg.image.load('./menu_buttons/back_death_ne_najata.png')

# ---------загрузка картинок для игры-------

background_fon = pg.image.load('backgrounds/zalivka2.png')
bg_main_bliz = pg.image.load('backgrounds/bg_main_1.png')
bg_main_sred = pg.image.load('backgrounds/bg_main_2.png')
bg_main_dal = pg.image.load('backgrounds/bg_main_3.png')
bg_main_floor = pg.image.load('backgrounds/fon_main.png')
black_fon = pg.image.load('backgrounds/black.png')

gui_healing_apteka = pg.image.load('ui/gui/apteka.png')
gui_healing_binti = pg.image.load('ui/gui/binti.png')
gui_healing_apteka_zauzana = pg.image.load('ui/gui/apteka_zauzana.png')
gui_healing_binti_zauzana = pg.image.load('ui/gui/binti_zauzana.png')

h_gui = pg.image.load('ui/gui/h_gui.png')
z_gui = pg.image.load('ui/gui/z_gui.png')

gui_10 = pg.image.load('ui/gui/10.png')
gui_9 = pg.image.load('ui/gui/9.png')
gui_8 = pg.image.load('ui/gui/8.png')
gui_7 = pg.image.load('ui/gui/7.png')
gui_6 = pg.image.load('ui/gui/6.png')
gui_5 = pg.image.load('ui/gui/5.png')
gui_4 = pg.image.load('ui/gui/4.png')
gui_3 = pg.image.load('ui/gui/3.png')
gui_2 = pg.image.load('ui/gui/2.png')
gui_1 = pg.image.load('ui/gui/1.png')
gui_0 = pg.image.load('ui/gui/0.png')

gui_ammo_0 = pg.image.load('ui/ammo/0.png')
gui_ammo_1 = pg.image.load('ui/ammo/1.png')
gui_ammo_2 = pg.image.load('ui/ammo/2.png')
gui_ammo_3 = pg.image.load('ui/ammo/3.png')
gui_ammo_4 = pg.image.load('ui/ammo/4.png')
gui_ammo_5 = pg.image.load('ui/ammo/5.png')

gui_reload = pg.image.load('ui/ammo/reload_gui.png')

right_hand = pg.image.load('player/right_hand.png')
left_hand = pg.image.load('player/left_hand.png')

# -----------------------------функции меню---------------------------------------------------
def shadowing(n_s, next_screen):
    global number_screen
    black = (0, 0, 0)
    fade_surface = pygame.Surface(screen.get_size())
    fade_surface.fill(black)
    for alpha in range(0, 256, 5):
        fade_surface.set_alpha(alpha)
        screen.blit(fade_surface, (0, 0))
        pygame.display.update()
        clock.tick(60)
    number_screen = n_s
    next_screen.set_alpha(0)
    for alpha in range(0, 256, 5):
        next_screen.set_alpha(alpha)
        screen.blit(next_screen, (0, 0))
        pygame.display.update()
        clock.tick(60)

def screen_main_menu_no_continue():
    global number_screen, button_play_not_select_col, fon_fade, mouse_pos, button_settings_not_select_col, button_exit_not_select_col, button_info_not_select_col, screen_for_fade, fade_screen, pressed
    screen.blit(fon_menu, (0, 0))
    screen.blit(button_play_not_select, (54, 80))

    button_play_not_select_col = button_play_not_select.get_rect(x=54, y=80)
    button_settings_not_select_col = button_play_not_select.get_rect(x=42, y=128)
    button_exit_not_select_col = button_play_not_select.get_rect(x=60, y=156)

    mouse_pos = pg.mouse.get_pos()
    pressed = pg.mouse.get_pressed()

    if button_play_not_select_col.collidepoint(mouse_pos):
        screen.blit(button_play_select, (54, 80))
    elif button_settings_not_select_col.collidepoint(mouse_pos):
        screen.blit(button_settings_selected, (42, 128))
    elif button_exit_not_select_col.collidepoint(mouse_pos):
        screen.blit(button_exit_selected, (60, 156))
    if pressed[0]:
        if button_play_not_select_col.collidepoint(mouse_pos):
            shadowing(2,fon_ready_ornot)




        elif button_settings_not_select_col.collidepoint(mouse_pos):
            shadowing(6,fon_settings_display)



        elif button_exit_not_select_col.collidepoint(mouse_pos):
            black = (0, 0, 0)
            fade_surface = pygame.Surface(screen.get_size())
            fade_surface.fill(black)
            for alpha in range(0, 256, 5):
                fade_surface.set_alpha(alpha)
                screen.blit(fade_surface, (0, 0))
                pygame.display.update()
                clock.tick(60)
            sys.exit()

def screen_ready_to_play():
    global button_no_not_pressed_col, button_yes_not_pressed_col, mouse_pos, pressed, number_screen

    screen.blit(fon_ready_ornot, (0, 0))

    button_no_not_pressed_col = button_no_pressed.get_rect(x=209, y=110)
    button_yes_not_pressed_col = button_yes_pressed.get_rect(x=130, y=110)

    mouse_pos = pg.mouse.get_pos()
    pressed = pg.mouse.get_pressed()

    if button_no_not_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_no_pressed, (209, 110))
    elif button_yes_not_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_yes_pressed, (130, 110))

    if pressed[0]:
        if button_no_not_pressed_col.collidepoint(mouse_pos):
            shadowing(1,fon_menu)


        if button_yes_not_pressed_col.collidepoint(mouse_pos):
            shadowing(3,fon_choose_difficulty)

def screen_choose_difficulty():
    global difficulty, number_screen
    screen.blit(fon_choose_difficulty, (0, 0))

    button_easy_pressed_col = button_easy_pressed.get_rect(x=130, y=82)
    button_medium_pressed_col = button_medium_pressed.get_rect(x=122, y=114)
    button_hard_pressed_col = button_hard_pressed.get_rect(x=136, y=148)

    mouse_pos = pg.mouse.get_pos()
    pressed1 = pg.mouse.get_pressed()

    if button_easy_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_easy_pressed, (130, 82))
    elif button_medium_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_medium_pressed, (122, 114))
    elif button_hard_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_hard_pressed, (136, 148))

    if pressed1[0]:
        if button_easy_pressed_col.collidepoint(mouse_pos) and pressed1[0]:
            difficulty = 1
            shadowing(4,loading_screen_1)



        if button_medium_pressed_col.collidepoint(mouse_pos) and pressed1[0]:
            difficulty = 2
            shadowing(4,loading_screen_1)



        if button_hard_pressed_col.collidepoint(mouse_pos) and pressed1[0]:
            difficulty = 3
            shadowing(4,loading_screen_1)

def loading_screen_popa():
    pg.time.delay(500)
    images = [pg.image.load(f'loading_screen/{i}.png') for i in range(1, 15)]

    for img in images:
        screen.blit(img, (0, 0))
        pg.display.update()
        pg.time.delay(100)

    pg.time.delay(500)

    shadowing('game',EXAMPLE_GAME)


def screen_settings_display():
    global number_screen, particles, fov, button1, button2, button3
    screen.blit(fon_settings_display, (0, 0))

    mouse_pos = pg.mouse.get_pos()
    pressed = pg.mouse.get_pressed()

    button_sounds_pressed_col = button_sounds_pressed.get_rect(x=260, y=38)
    button_back_pressed_col = button_back_pressed.get_rect(x=172, y=194)

    button_plus_pressed_col = button_plus_pressed.get_rect(x=132, y=84)
    button_minus_pressed_col = button_minus_pressed.get_rect(x=40, y=84)

    button_plus_pressed_col1 = button_plus_pressed.get_rect(x=132, y=140)
    button_minus_pressed_col1 = button_minus_pressed.get_rect(x=40, y=140)

    button_left_pressed_col1 = button_left_pressed.get_rect(x=248, y=90)
    button_right_pressed_col1 = button_right_pressed.get_rect(x=316, y=138)

    if button_sounds_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_sounds_pressed, (260, 38))

    elif button_back_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_back_pressed, (172, 194))

    elif button_left_pressed_col1.collidepoint(mouse_pos):
        screen.blit(button_left_pressed, (248, 90))

    elif button_right_pressed_col1.collidepoint(mouse_pos):
        screen.blit(button_right_pressed, (316, 138))




    elif button_plus_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_plus_pressed, (132, 84))

    elif button_minus_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_minus_pressed, (40, 84))

    elif button_plus_pressed_col1.collidepoint(mouse_pos):
        screen.blit(button_plus_pressed, (132, 140))

    elif button_minus_pressed_col1.collidepoint(mouse_pos):
        screen.blit(button_minus_pressed, (40, 140))

    if particles == 0:
        screen.blit(scala_particles_0, (54, 84))
    elif particles == 1:
        screen.blit(scala_particles_1, (54, 84))
    elif particles == 2:
        screen.blit(scala_particles_2, (54, 84))
    elif particles == 3:
        screen.blit(scala_particles_3, (54, 84))
    elif particles == 4:
        screen.blit(scala_particles_4, (54, 84))
    elif particles == 5:
        screen.blit(scala_particles_5, (54, 84))
    elif particles == 6:
        screen.blit(scala_particles_6, (54, 84))
    elif particles == 7:
        screen.blit(scala_particles_7, (54, 84))
    elif particles == 8:
        screen.blit(scala_particles_8, (54, 84))
    elif particles == 9:
        screen.blit(scala_particles_9, (54, 84))
    elif particles == 10:
        screen.blit(scala_particles_10, (54, 84))
    elif particles == 11:
        screen.blit(scala_particles_11, (54, 84))
    elif particles == 12:
        screen.blit(scala_particles_12, (54, 84))

    if fov == 0:
        screen.blit(scala_particles_0, (54, 140))
    elif fov == 1:
        screen.blit(scala_particles_1, (54, 140))
    elif fov == 2:
        screen.blit(scala_particles_2, (54, 140))
    elif fov == 3:
        screen.blit(scala_particles_3, (54, 140))
    elif fov == 4:
        screen.blit(scala_particles_4, (54, 140))
    elif fov == 5:
        screen.blit(scala_particles_5, (54, 140))
    elif fov == 6:
        screen.blit(scala_particles_6, (54, 140))
    elif fov == 7:
        screen.blit(scala_particles_7, (54, 140))
    elif fov == 8:
        screen.blit(scala_particles_8, (54, 140))
    elif fov == 9:
        screen.blit(scala_particles_9, (54, 140))
    elif fov == 10:
        screen.blit(scala_particles_10, (54, 140))
    elif fov == 11:
        screen.blit(scala_particles_11, (54, 140))
    elif fov == 12:
        screen.blit(scala_particles_12, (54, 140))

    if pressed[0]:

        if button_sounds_pressed_col.collidepoint(mouse_pos) and pressed[0]:
            number_screen = 7

        elif button_back_pressed_col.collidepoint(mouse_pos) and pressed[0]:
            shadowing(1,fon_menu)


        elif button_plus_pressed_col.collidepoint(mouse_pos):
            if particles < 12:
                particles += 1
        elif button_minus_pressed_col.collidepoint(mouse_pos):
            if particles > 0:
                particles -= 1



        elif button_plus_pressed_col1.collidepoint(mouse_pos):
            if fov < 12:
                fov += 1
        elif button_minus_pressed_col1.collidepoint(mouse_pos):
            if fov > 0:
                fov -= 1

def screen_settings_sounds():
    global number_screen

    screen.blit(fon_settings_sounds, (0, 0))

    mouse_pos = pg.mouse.get_pos()
    pressed = pg.mouse.get_pressed()

    button_display_pressed_col = button_display_pressed.get_rect(x=62, y=38)
    button_back_pressed_col = button_back_pressed.get_rect(x=172, y=194)

    if button_display_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_display_pressed, (62, 38))

    elif button_back_pressed_col.collidepoint(mouse_pos):
        screen.blit(button_back_pressed, (172, 194))

    if pressed[0]:
        if button_display_pressed_col.collidepoint(mouse_pos) and pressed[0]:
            number_screen = 6

        elif button_back_pressed_col.collidepoint(mouse_pos) and pressed[0]:
            shadowing(1,fon_menu)
def screen_death():
    global number_screen

    screen.blit(fon_menu_death,(0,0,))
    # screen.blit(back_death_najata,(163, 172))

    button_back_not_pressed_col = back_death_najata.get_rect(x=163, y=172)

    mouse_pos = pg.mouse.get_pos()
    pressed = pg.mouse.get_pressed()

    if button_back_not_pressed_col.collidepoint(mouse_pos):
        screen.blit(back_death_najata, (163, 172))

    if pressed[0]:
        if button_back_not_pressed_col.collidepoint(mouse_pos):
            shadowing(1, fon_menu)



#--------------------------ф-циэ джля игры--------------------------------


#-----------------------------класс игрока-----------------------------




#----------------------------класс зомби и стрельбо------------------------------



#------------------------jcycjd jq цикл----------------------------------

run = True
while run:
    dt = clock.tick(165) / 1000.0
    now = pg.time.get_ticks()

    for event in pg.event.get():
        if event.type == pg.QUIT:
            sys.exit()

        keys = pg.key.get_pressed()
        # ----------------------------------menu----------------------------------------------------
        if number_screen == 1:
            screen_main_menu_no_continue()

        elif number_screen == 2:
            screen_ready_to_play()

        elif number_screen == 3:
            screen_choose_difficulty()
        elif number_screen == 4:
            loading_screen_popa()

        elif number_screen == 6:
            screen_settings_display()

        elif number_screen == 7:
            screen_settings_sounds()

        elif number_screen == 8:
            screen_death()

# ----------------------------------------game in cikl-------------------------------------------------


# -----------------------------------------------------------------------------------------


    pg.display.update()
