import sys
import pygame as pg
import math

pg.init()

screen_width = 600
screen_height = 436
screen = pg.display.set_mode(
    [screen_width, screen_height],
    pg.RESIZABLE | pg.SCALED | pg.FULLSCREEN
)
pg.display.set_caption("Game")
black = (0, 0, 0)

SCREEN_WIDTH = screen_width
SCREEN_HEIGHT = screen_height

bg_main_flor_pos = (0, -40)
bg_black = (0, -40)
bg_1 = (0, -40)
bg_2 = (0, -40)
bg_3 = (0, -40)
bg_zaliv = (0, -40)

particles = 5
fov = 5
continue_button = 0

number_screen = "game"
clock = pg.time.Clock()
difficulty = 0

coins = 0
ammo = 5
health = 10
max_health = 14

level_left_bound = 0
level_right_bound = 1850

moving_left = False
moving_right = False
kicking = False

is_reloading = False
reload_start_time = 0
reload_duration = 4000

bandages_active = False
bandages_activation_start_time = 0
bandages_last_heal_time = 0
bandages_duration = 5000
bandages_cooldown = 30000
bandages_next_use_time = 0

apteka_cooldown = 60000
apteka_next_use_time = 0

background_fon = pg.image.load('backgrounds/zalivka2.png')
bg_main_bliz = pg.image.load('backgrounds/bg_main_1.png')
bg_main_sred = pg.image.load('backgrounds/bg_main_2.png')
bg_main_dal = pg.image.load('backgrounds/bg_main_3.png')
bg_main_floor = pg.image.load('backgrounds/fon_main.png')
black_fon = pg.image.load('backgrounds/black.png')

gui_healing_apteka = pg.image.load('ui/gui/apteka.png')
gui_healing_binti = pg.image.load('ui/gui/binti.png')
gui_healing_apteka_zauzana = pg.image.load('ui/gui/apteka_zauzana.png')
gui_healing_binti_zauzana = pg.image.load('ui/gui/binti_zauzana.png')

h_gui = pg.image.load('ui/gui/h_gui.png')
z_gui = pg.image.load('ui/gui/z_gui.png')

gui_10 = pg.image.load('ui/gui/10.png')
gui_9 = pg.image.load('ui/gui/9.png')
gui_8 = pg.image.load('ui/gui/8.png')
gui_7 = pg.image.load('ui/gui/7.png')
gui_6 = pg.image.load('ui/gui/6.png')
gui_5 = pg.image.load('ui/gui/5.png')
gui_4 = pg.image.load('ui/gui/4.png')
gui_3 = pg.image.load('ui/gui/3.png')
gui_2 = pg.image.load('ui/gui/2.png')
gui_1 = pg.image.load('ui/gui/1.png')
gui_0 = pg.image.load('ui/gui/0.png')

gui_ammo_0 = pg.image.load('ui/ammo/0.png')
gui_ammo_1 = pg.image.load('ui/ammo/1.png')
gui_ammo_2 = pg.image.load('ui/ammo/2.png')
gui_ammo_3 = pg.image.load('ui/ammo/3.png')
gui_ammo_4 = pg.image.load('ui/ammo/4.png')
gui_ammo_5 = pg.image.load('ui/ammo/5.png')

gui_reload = pg.image.load('ui/ammo/reload_gui.png')

right_hand = pg.image.load('player/right_hand.png')
left_hand = pg.image.load('player/left_hand.png')

right_hand_x = 5
right_hand_y = -10

left_hand_x = 15
left_hand_y = 13

health_images = {
    0: gui_0,
    1: gui_1,
    2: gui_2,
    3: gui_3,
    4: gui_4,
    5: gui_5,
    6: gui_6,
    7: gui_7,
    8: gui_8,
    9: gui_9,
    10: gui_10,
}

ammo_images = {
    0: gui_ammo_0,
    1: gui_ammo_1,
    2: gui_ammo_2,
    3: gui_ammo_3,
    4: gui_ammo_4,
    5: gui_ammo_5,
}


def blit_hand_towards_mouse(target_surf, hand_surf, center_x, center_y):
    mouse_x, mouse_y = pg.mouse.get_pos()
    vector_x, vector_y = mouse_x - center_x, mouse_y - center_y
    angle = (180 / math.pi) * -math.atan2(vector_y, vector_x) - 90
    rotated_img = pg.transform.rotate(hand_surf, round(angle))
    rotated_rect = rotated_img.get_rect(center=(center_x, center_y))
    target_surf.blit(rotated_img, rotated_rect)


def draw_bg(camera_scroll):
    parallax_bgfon = 0.2
    parallax_bg_main_dal = 0.4
    parallax_bg_main_sred = 0.6
    parallax_bg_main_bliz = 0.8

    screen.blit(background_fon, (bg_zaliv[0] - camera_scroll * parallax_bgfon, bg_zaliv[1]))
    screen.blit(bg_main_dal, (bg_3[0] - camera_scroll * parallax_bg_main_dal, bg_3[1]))
    screen.blit(bg_main_sred, (bg_2[0] - camera_scroll * parallax_bg_main_sred, bg_2[1]))
    screen.blit(bg_main_bliz, (bg_1[0] - camera_scroll * parallax_bg_main_bliz, bg_1[1]))
    screen.blit(black_fon, (bg_black[0] - camera_scroll, bg_black[1]))
    screen.blit(bg_main_floor, (bg_main_flor_pos[0] - camera_scroll, bg_main_flor_pos[1]))


def draw_gui(ammo, health):
    max_key = max(health_images.keys())
    health_key = health if health <= max_key else max_key
    health_img = health_images[health_key]
    ammo_img = ammo_images[ammo]
    screen.blit(health_img, (0, 10))
    screen.blit(ammo_img, (104, 34))

    screen.blit(h_gui, (10, 45))
    screen.blit(z_gui, (30, 45))

    current_time = pg.time.get_ticks()
    if current_time < apteka_next_use_time:
        screen.blit(gui_healing_apteka_zauzana, (6, 29))
    else:
        screen.blit(gui_healing_apteka, (6, 29))
    if bandages_active or current_time < bandages_next_use_time:
        screen.blit(gui_healing_binti_zauzana, (26, 29))
    else:
        screen.blit(gui_healing_binti, (26, 29))


# -------------- персонажжааав"!!!! -------------- #
class Human(pg.sprite.Sprite):
    def __init__(self, char_type, player_x, player_y, speed):
        pg.sprite.Sprite.__init__(self)
        self.alive = True
        self.char_type = char_type
        self.speed = speed
        self.direction = 1
        self.flip = False
        self.animation_list = []
        self.frame_index = 0
        self.update_time = pg.time.get_ticks()
        self.action = 0
        self.reversed_walk = False
        self.shooting_flip = False

        temp_list = []
        for i in range(4):
            img = pg.image.load(f'{self.char_type}/idle/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        temp_list = []
        for i in range(7):
            img = pg.image.load(f'{self.char_type}/walking/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        temp_list = []
        for i in range(4):
            img = pg.image.load(f'{self.char_type}/pinok/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        self.image = self.animation_list[self.action][self.frame_index]
        self.rect = self.image.get_rect()
        self.rect.center = (player_x, player_y)
        self.hitbox = self.rect.copy()

    def update_hitbox(self):
        offset_x = int(self.rect.width * 0.25)
        offset_y = int(self.rect.height * 0.2)
        width = int(self.rect.width * 0.5)
        height = int(self.rect.height * 0.6)
        self.hitbox = pg.Rect(self.rect.x + offset_x,
                              self.rect.y + offset_y,
                              width,
                              height)

    def move(self, moving_left, moving_right):
        global kicking
        if kicking:
            return
        dx = 0
        if moving_left:
            dx = -self.speed
            self.direction = -1
        if moving_right:
            dx = self.speed
            self.direction = 1
        new_x = self.rect.x + dx
        self.rect.x = max(level_left_bound, min(new_x, level_right_bound - self.rect.width))

    def update_animation(self):
        ANIMATION_COOLDOWN = 100
        if self.action == 1 and self.reversed_walk:
            frame_to_show = len(self.animation_list[self.action]) - 1 - self.frame_index
        else:
            frame_to_show = self.frame_index
        self.image = self.animation_list[self.action][frame_to_show]
        if pg.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
            self.update_time = pg.time.get_ticks()
            self.frame_index += 1
        if self.frame_index >= len(self.animation_list[self.action]):
            if self.action == 2:
                self.update_action(0)
                global kicking
                kicking = False
            self.frame_index = 0

    def update_action(self, new_action):
        if new_action != self.action:
            self.action = new_action
            self.frame_index = 0
            self.update_time = pg.time.get_ticks()

    def draw(self, camera_scroll):
        shadow = self.image.copy().convert_alpha()
        shadow.fill((0, 0, 0, 80), special_flags=pg.BLEND_RGBA_MULT)
        shadow = pg.transform.flip(shadow, self.flip, True)
        shadow_rect = self.rect.copy()
        shadow_rect.x -= camera_scroll
        shadow_rect.top = self.rect.bottom
        screen.blit(shadow, shadow_rect)

        extra_right = 0
        extra_left = 0
        if self.action == 2 and self.frame_index in (0, 8, 1):
            extra_right = -4
            extra_left = -4

        if not self.flip:
            right_hand_offset_x = right_hand_x + extra_right
            left_hand_offset_x = left_hand_x + extra_left
            right_hand_pos_x = self.rect.x + right_hand_offset_x - camera_scroll
            left_hand_pos_x = self.rect.x + left_hand_offset_x - camera_scroll
            base_right_hand_img = right_hand
            base_left_hand_img = left_hand
        else:
            frame_width = self.image.get_width()
            right_hand_offset_x = right_hand_x + extra_right
            left_hand_offset_x = left_hand_x + extra_left
            right_hand_pos_x = self.rect.x + (
                    frame_width - right_hand_offset_x - right_hand.get_width()) - camera_scroll
            left_hand_pos_x = self.rect.x + (frame_width - left_hand_offset_x - left_hand.get_width()) - camera_scroll
            base_right_hand_img = pg.transform.flip(right_hand, True, False)
            base_left_hand_img = pg.transform.flip(left_hand, True, False)

        right_hand_pos_y = self.rect.y + right_hand_y
        left_hand_pos_y = self.rect.y + left_hand_y

        blit_hand_towards_mouse(
            screen,
            base_left_hand_img,
            left_hand_pos_x + base_left_hand_img.get_width() // 2,
            left_hand_pos_y + base_left_hand_img.get_height() // 2
        )

        draw_rect = self.rect.copy()
        draw_rect.x -= camera_scroll
        screen.blit(pg.transform.flip(self.image, self.flip, False), draw_rect)

        mouse_x, _ = pg.mouse.get_pos()
        hand_center_x = right_hand_pos_x + base_right_hand_img.get_width() // 2
        threshold = 10
        global is_shooting, shooting_start_time, shooting_frame_duration, shooting_frames

        if self.char_type == 'player' and is_shooting:
            flip_to_use = self.shooting_flip
            elapsed = pg.time.get_ticks() - shooting_start_time
            frame_index = elapsed // shooting_frame_duration
            if frame_index >= len(shooting_frames):
                is_shooting = False
                frame = right_hand  # Возврат к обычной руке
                if self.flip:
                    right_hand_img = pg.transform.flip(frame, True, False)
                else:
                    right_hand_img = frame
            else:
                frame = shooting_frames[frame_index]
                if flip_to_use:
                    right_hand_img = pg.transform.flip(frame, True, False)
                else:
                    right_hand_img = frame
        else:
            if self.flip:
                right_hand_img = pg.transform.flip(right_hand, True, False)
            else:
                right_hand_img = right_hand

        blit_hand_towards_mouse(
            screen,
            right_hand_img,
            right_hand_pos_x + right_hand_img.get_width() // 2,
            right_hand_pos_y + right_hand_img.get_height() // 2
        )

        self.update_hitbox()


player = Human('player', 370, 157, 1)
camera_scroll = 0


# -------------- ЗЗЗЗОМБИ"!!!! -------------- #
class Zombies():
    def __init__(self, zombie_type, speed):
        self.alive = True
        self.char_type = zombie_type
        self.speed = speed  # быстрее или медленнее игрока
        self.direction = 1
        self.flip = False
        self.animation_list = []
        self.frame_index = 0
        self.update_time = pg.time.get_ticks()
        self.action = 0
        self.reversed_walk = False
        self.attack_done = False   # Флаг для атаки
        self.last_attack_time = 0  # Время последнего удара
        self.attack_delay = 500    # Задержка между ударами

        self.hit_time = None
        self.marked_for_death = False

        # Анимация простоя
        temp_list = []
        for i in range(5):
            img = pg.image.load(f'{self.char_type}/idle/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        # Анимация ходьбы
        temp_list = []
        for i in range(8):
            img = pg.image.load(f'{self.char_type}/walking/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        # Анимация атаки
        temp_list = []
        for i in range(5):
            img = pg.image.load(f'{self.char_type}/attack/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        # Анимация смерти
        temp_list = []
        for i in range(10):
            img = pg.image.load(f'{self.char_type}/death/{i}.png')
            temp_list.append(img)
        self.animation_list.append(temp_list)

        self.image = self.animation_list[self.action][self.frame_index]
        self.rect = self.image.get_rect()
        self.pos = [float(self.rect.x), float(self.rect.y)]
        self.update_hitbox()

    def update_hitbox(self):
        new_width = int(self.rect.width * 0.6)
        new_x = self.rect.centerx - new_width // 2
        self.hitbox = pg.Rect(new_x, self.rect.y + 20, new_width, int(self.rect.height) / 1.5)
        # Добавляем маску для хитбокса зомби — по изображению
        self.mask = pg.mask.from_surface(pg.transform.flip(self.image, self.flip, False))

    def update_animation(self):
        ANIMATION_COOLDOWN = 100
        current_time = pg.time.get_ticks()
        if current_time - self.update_time > ANIMATION_COOLDOWN:
            self.update_time = current_time
            self.frame_index += 1

            # Если зомби в анимации атаки и наступил нужный кадр (например, индекс 2)
            if self.action == 2 and self.frame_index == 2 and not self.attack_done:
                if current_time - self.last_attack_time >= self.attack_delay:
                    if self.rect.colliderect(player.rect):
                        global health
                        health = max(health - 2, 0)  # Отнимаем 2 очка здоровья
                        self.attack_done = True
                        self.last_attack_time = current_time

            # Если анимация закончилась, сбрасываем счетчик и флаг
            if self.frame_index >= len(self.animation_list[self.action]):
                self.frame_index = 0
                if self.action == 2:
                    self.attack_done = False
        self.image = self.animation_list[self.action][self.frame_index]

    def update_action(self, new_action):
        if new_action != self.action:
            self.action = new_action
            self.frame_index = 0
            self.update_time = pg.time.get_ticks()
            if new_action == 2:
                self.attack_done = False

    def move_towards_player(self, player):
        threshold = 25  # Если зомби достаточно близко к игроку, он переходит в режим атаки
        if abs(self.rect.centerx - player.rect.centerx) > threshold:
            if self.rect.centerx < player.rect.centerx:
                self.pos[0] += self.speed
                self.flip = False
            else:
                self.pos[0] -= self.speed
                self.flip = True
            self.rect.x = int(self.pos[0])
            # Обновляем хитбокс после смещения
            self.update_hitbox()
            self.update_action(1)  # Анимация ходьбы
        else:
            self.update_action(2)  # Анимация атаки

    def draw(self, camera_scroll):
        # Рисуем тень, аналогичную тени игрока
        shadow = self.image.copy().convert_alpha()
        shadow.fill((0, 0, 0, 80), special_flags=pg.BLEND_RGBA_MULT)
        shadow = pg.transform.flip(shadow, self.flip, True)
        shadow_rect = self.rect.copy()
        shadow_rect.x -= camera_scroll
        shadow_rect.top = self.rect.bottom  # Тень расположена ниже зомби
        screen.blit(shadow, shadow_rect)

        # Отрисовываем зомби
        draw_rect = self.rect.copy()
        draw_rect.x -= camera_scroll
        screen.blit(pg.transform.flip(self.image, self.flip, False), draw_rect)

        # Рисуем outline по маске зомби — как у пули, только цветом (0, 0, 255)
        zombie_mask = self.mask
        mask_offset_x = self.rect.x - camera_scroll
        mask_offset_y = self.rect.y
        outline = zombie_mask.outline()
        outline = [(point[0] + mask_offset_x, point[1] + mask_offset_y) for point in outline]
        if outline:
            pg.draw.lines(screen, (0, 0, 255), True, outline, 2)

        # По желанию: рисуем хитбокс-прямоугольник зомби — полупрозрачный, для сравнения
        # hitbox_rect = self.hitbox.copy()
        # hitbox_rect.x -= camera_scroll
        # pg.draw.rect(screen, (0, 0, 255), hitbox_rect, 1)

        # По желанию: рисуем bounding box (rect) зомби — красным
        # rect_for_zombie = self.rect.copy()
        # rect_for_zombie.x -= camera_scroll
        # pg.draw.rect(screen, (255, 0, 0), rect_for_zombie, 1)


# Создаем зомби и располагаем его вне экрана, но рядом с игроком (например, справа на 400px)
zombie = Zombies('zombie_def', 1 / 1.8)
zombie.rect.x = player.rect.x + 400
zombie.rect.y = player.rect.y - 6
zombie.pos[0] = zombie.rect.x  # синхронизируем нашу float-позицию
zombie.pos[1] = zombie.rect.y

# -------------- Доп код: вздрищеные пули -------------- #
shooting_frames = []
for i in range(6):
    img = pg.image.load(f'player/shooting/{i}.png')
    shooting_frames.append(img)

bullet_frames = []
for i in range(8):
    img = pg.image.load(f'player/bullet/{i}.png')
    bullet_frames.append(img)

is_shooting = False
shooting_start_time = 0
shooting_frame_duration = 50

bullets = []


class Bullet:
    bullet_rotation_offset = 0  # можно скорректировать при необходимости

    def __init__(self, pos, direction, angle):
        """
        pos: старт поз
        direction:  вектор
        angle:
        """
        self.pos = [pos[0], pos[1]]
        self.dir = direction
        self.speed = 8
        self.angle = angle
        self.spawn_time = pg.time.get_ticks()
        self.frame_duration = 30

        # При инициализации сразу обновляем кадр, rect и маску
        self.update_frame_and_mask()
        self.start_pos = (pos[0], pos[1])
        self.has_collided = False
        self.collision_distance = None
        self.hit_time = None

    def update_frame_and_mask(self):
        current_time = pg.time.get_ticks()
        elapsed = current_time - self.spawn_time
        frame_index = min(elapsed // self.frame_duration, len(bullet_frames) - 1)
        self.current_image = bullet_frames[frame_index]
        total_angle = self.angle + Bullet.bullet_rotation_offset
        self.rotated_image = pg.transform.rotate(self.current_image, total_angle)
        self.rect = self.rotated_image.get_rect(center=(round(self.pos[0]), round(self.pos[1])))
        self.mask = pg.mask.from_surface(self.rotated_image)

    def update(self):
        self.pos[0] += self.dir[0] * self.speed
        self.pos[1] += self.dir[1] * self.speed
        self.update_frame_and_mask()

    def draw(self, surface):
        surface.blit(self.rotated_image, self.rect)
        outline = self.mask.outline()
        outline = [(point[0] + self.rect.x, point[1] + self.rect.y) for point in outline]
        self.outline = outline
        if outline:
            pg.draw.lines(surface, (0, 255, 0), True, outline, 1)
            pass



# -------------------------------------------------------------------------- #

run = True
while run:
    dt = clock.tick(165) / 1000.0
    for event in pg.event.get():
        if event.type == pg.QUIT:
            sys.exit()

        if event.type == pg.MOUSEBUTTONDOWN:
            if event.button == 1 and ammo > 0 and not is_reloading:
                ammo -= 1
                is_shooting = True
                shooting_start_time = pg.time.get_ticks()
                player.shooting_flip = player.flip
                if not player.flip:
                    right_hand_offset_x = right_hand_x
                    right_hand_pos_x = player.rect.x + right_hand_offset_x - camera_scroll
                    right_hand_pos_y = player.rect.y + right_hand_y
                else:
                    frame_width = player.image.get_width()
                    right_hand_offset_x = right_hand_x
                    right_hand_pos_x = player.rect.x + (frame_width - right_hand_offset_x - right_hand.get_width()) - camera_scroll
                    right_hand_pos_y = player.rect.y + right_hand_y

                bullet_spawn_x = right_hand_pos_x + right_hand.get_width() // 2
                bullet_spawn_y = right_hand_pos_y + right_hand.get_height() // 2

                mouse_x, mouse_y = pg.mouse.get_pos()
                vector_x = mouse_x - bullet_spawn_x
                vector_y = mouse_y - bullet_spawn_y
                norm = math.sqrt(vector_x**2 + vector_y**2)
                if norm == 0:
                    norm = 1
                direction = (vector_x / norm, vector_y / norm)
                bullet_angle = (180 / math.pi) * -math.atan2(vector_y, vector_x) - 90

                bullet_offset = right_hand.get_height() * 1.8
                start_x = bullet_spawn_x + direction[0] * bullet_offset
                start_y = bullet_spawn_y + direction[1] * bullet_offset - 2

                new_bullet = Bullet((start_x, start_y), direction, bullet_angle)
                bullets.append(new_bullet)

        if event.type == pg.KEYDOWN:
            if event.key == pg.K_a:
                moving_left = True
            if event.key == pg.K_d:
                moving_right = True
            if event.key == pg.K_e:
                kicking = True
                player.update_action(2)
            if event.key == pg.K_r and not is_reloading:
                is_reloading = True
                reload_start_time = pg.time.get_ticks()
            if event.key == pg.K_z:
                current_time = pg.time.get_ticks()
                if current_time >= bandages_next_use_time and not bandages_active:
                    bandages_active = True
                    bandages_activation_start_time = current_time
                    bandages_last_heal_time = current_time
            if event.key == pg.K_h:
                current_time = pg.time.get_ticks()
                if current_time >= apteka_next_use_time:
                    health = min(health + 8, max_health)
                    apteka_next_use_time = current_time + apteka_cooldown
            if event.key == pg.K_ESCAPE:
                run = False

        if event.type == pg.KEYUP:
            if event.key == pg.K_a:
                moving_left = False
            if event.key == pg.K_d:
                moving_right = False
            if event.key == pg.K_ESCAPE:
                run = False

    player.move(moving_left, moving_right)
    player_screen_x = player.rect.x - camera_scroll

    if player_screen_x > screen_width - 150:
        camera_scroll = player.rect.x - (screen_width - 150)
    elif player_screen_x < 100:
        camera_scroll = player.rect.x - 100
    camera_scroll = max(level_left_bound, min(camera_scroll, level_right_bound - screen_width))

    mouse_x, _ = pg.mouse.get_pos()
    if mouse_x < (player.rect.centerx - camera_scroll):
        player.flip = True
    else:
        player.flip = False

    if (moving_left or moving_right) and not kicking:
        player.update_action(1)
        if (moving_right and mouse_x < (player.rect.centerx - camera_scroll)) or \
                (moving_left and mouse_x > (player.rect.centerx - camera_scroll)):
            player.reversed_walk = True
        else:
            player.reversed_walk = False
    elif not kicking:
        player.update_action(0)
        player.reversed_walk = False

    player.update_animation()

    if is_reloading:
        current_time = pg.time.get_ticks()
        if current_time - reload_start_time >= reload_duration:
            ammo = 5
            is_reloading = False

    current_time = pg.time.get_ticks()
    if bandages_active:
        if current_time - bandages_last_heal_time >= 1000:
            health = min(health + 1, max_health)
            bandages_last_heal_time += 1000
        if current_time - bandages_activation_start_time >= bandages_duration:
            bandages_active = False
            bandages_next_use_time = bandages_activation_start_time + bandages_cooldown

    draw_bg(camera_scroll)
    player.draw(camera_scroll)

    # Обновление и отрисовка зомби:

    if zombie.alive:
        zombie.move_towards_player(player)
        zombie.update_animation()
        zombie.draw(camera_scroll)

    draw_gui(ammo, health)

    for bullet in bullets[:]:
        bullet.update()
        bullet.draw(screen)

        if zombie.alive and not zombie.marked_for_death:
            if bullet.rect.colliderect(zombie.hitbox):
                now = pg.time.get_ticks()
                if bullet.hit_time is None:
                    bullet.hit_time = now
                if zombie.hit_time is None:
                    zombie.hit_time = now
                    zombie.marked_for_death = True  # <<-- теперь зомби "помечен" на смерть

        # Удаляем пулю через задержку
        if bullet.hit_time is not None and pg.time.get_ticks() - bullet.hit_time > 120:
            if bullet in bullets:
                bullets.remove(bullet)
        # Удаляем зомби через задержку
        if zombie.hit_time is not None and pg.time.get_ticks() - zombie.hit_time > 120:
            zombie.alive = False

    if is_reloading:
        reload_rect = gui_reload.get_rect(center=(screen_width // 2, 30))
        screen.blit(gui_reload, reload_rect)

    pg.display.update()

pg.quit()
