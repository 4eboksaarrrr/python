import pygame as pg
import math

pg.init()

# Параметры экрана
SCREEN_WIDTH = 684
SCREEN_HEIGHT = 216
screen = pg.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT),
                              pg.RESIZABLE | pg.SCALED | pg.FULLSCREEN)
pg.display.set_caption("Вращающаяся рука")

# Загрузка изображения руки
right_hand = pg.image.load('player/right_hand.png')

# Загрузка кадров анимации стрельбы
shooting_frames = []
for i in range(6):
    img = pg.image.load(f'player/shooting/{i}.png')
    shooting_frames.append(img)

# Загрузка кадров анимации пули
bullet_frames = []
for i in range(8):
    img = pg.image.load(f'player/bullet/{i}.png')
    bullet_frames.append(img)

# Центр вращения (можно изменить по необходимости)
center_x = SCREEN_WIDTH // 2
center_y = SCREEN_HEIGHT // 2

clock = pg.time.Clock()

# Переменные для анимации стрельбы
is_shooting = False
shooting_start_time = 0
shooting_frame_duration = 50  # время показа каждого кадра, мс

# Список активных пуль
bullets = []

class Bullet:
    bullet_rotation_offset = 0  # можно изменить на 90, -90, и т.д.

    def __init__(self, pos, direction, angle):
        self.pos = [pos[0], pos[1]]
        self.dir = direction
        self.speed = 8
        self.angle = angle
        self.spawn_time = pg.time.get_ticks()
        self.frame_duration = 30

    def update(self):
        self.pos[0] += self.dir[0] * self.speed
        self.pos[1] += self.dir[1] * self.speed

    def draw(self, surface):
        current_time = pg.time.get_ticks()
        elapsed = current_time - self.spawn_time
        frame_index = (elapsed // self.frame_duration) % len(bullet_frames)
        img = bullet_frames[frame_index]
        # Корректируем угол с учётом поправочного смещения
        rotated_img = pg.transform.rotate(img, self.angle + Bullet.bullet_rotation_offset)
        # Определяем новый прямоугольник с центром в self.pos
        rect = rotated_img.get_rect(center=(round(self.pos[0]), round(self.pos[1])))
        surface.blit(rotated_img, rect)

def blit_hand_towards_mouse(target_surf, hand_surf, center_x, center_y):
    mouse_x, mouse_y = pg.mouse.get_pos()

    # Если курсор на левой половине экрана — отражаем изображение руки
    if mouse_x < SCREEN_WIDTH // 2:
        hand_surf = pg.transform.flip(hand_surf, True, False)

    vector_x = mouse_x - center_x
    vector_y = mouse_y - center_y
    # Вычисляем угол поворота (как для руки, так и для пули)
    angle = (180 / math.pi) * -math.atan2(vector_y, vector_x) - 90

    rotated_img = pg.transform.rotate(hand_surf, round(angle))
    rotated_rect = rotated_img.get_rect(center=(center_x, center_y))
    target_surf.blit(rotated_img, rotated_rect)

running = True
while running:
    screen.fill((181, 190, 199))  # Фон окна

    for event in pg.event.get():
        if event.type == pg.QUIT:
            running = False

        # При нажатии левой кнопки мыши запускается анимация стрельбы и производится выстрел пули
        if event.type == pg.MOUSEBUTTONDOWN:
            if event.button == 1:

                is_shooting = True
                shooting_start_time = pg.time.get_ticks()

                # Расчёт направления от центра к курсору
                mouse_x, mouse_y = pg.mouse.get_pos()
                vector_x = mouse_x - center_x
                vector_y = mouse_y - center_y
                norm = math.sqrt(vector_x**2 + vector_y**2)
                if norm == 0:
                    norm = 1
                direction = (vector_x / norm, vector_y / norm)

                # Вычисляем угол, аналогичный повороту руки
                bullet_angle = (180 / math.pi) * -math.atan2(vector_y, vector_x) - 90

                # Определяем стартовую точку: смещение от центра на нужное расстояние (можно регулировать)
                bullet_offset = right_hand.get_height() * 1.8
                start_x = center_x + direction[0] * bullet_offset
                start_y = center_y + direction[1] * bullet_offset - 2

                # Создаем новую пулю и добавляем её в список активных пуль
                new_bullet = Bullet((start_x, start_y), direction, bullet_angle)
                bullets.append(new_bullet)


    # Обновление анимации стрельбы — выбор нужного кадра для руки
    if is_shooting:
        elapsed = pg.time.get_ticks() - shooting_start_time
        frame_index = elapsed // shooting_frame_duration
        if frame_index >= len(shooting_frames):
            is_shooting = False
            active_hand = right_hand
        else:
            active_hand = shooting_frames[frame_index]
    else:
        active_hand = right_hand

    # Обновление и отрисовка пуль
    # В главном цикле, вместо:
    # Отрисовка и обновление пуль
    for bullet in bullets:
        bullet.update()
        bullet.draw(screen)
    # Отрисовка руки с учётом её поворота и выбранной анимации
    blit_hand_towards_mouse(screen, active_hand, center_x, center_y)

    # Вместо этого сделай так:
    # Отрисовка руки
    blit_hand_towards_mouse(screen, active_hand, center_x, center_y)
    # Отрисовка и обновление пуль поверх руки
    for bullet in bullets:
        bullet.update()
        bullet.draw(screen)

    pg.display.update()
    clock.tick(200)

pg.quit()
